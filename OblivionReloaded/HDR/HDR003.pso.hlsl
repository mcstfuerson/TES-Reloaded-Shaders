//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/HDR003.pso /Fcshaderdump19/HDR003.pso.dis
//
//
#define	ScreenSpace	Src0
// Parameters:
//
sampler2D ScreenSpace : register(s0);
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   ScreenSpace         texture_0       1
//


// Structures:

struct VS_OUTPUT {
    float2 ScreenOffset : TEXCOORD0;
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

static const float3 BlurOffsets[9] =
{
        float3(-0.0f, 0.001f, 0.0f),
        float3(-0.001f, -0.001f, 0.0f),
	    float3(-0.0010, 0.00, 0.0f),
	    float3(0.00, -0.0010, 0.0f),
	    float3(0.0f, 0.0f, 0.0f),
	    float3(0.0010, 0.00, 0.0f),
	    float3(0.00, 0.0010, 0.0f),
        float3(0.001f, 0.001f, 0.0f),
        float3(0.001f, -0.001f, 0.0f)
};

// Code:

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

    float3 t0;
    float3 blur;

    //Mostly prevents shimmering HDR issue 
    blur = tex2D(ScreenSpace, IN.ScreenOffset.xy + BlurOffsets[0].xy).xyz;
    blur += tex2D(ScreenSpace, IN.ScreenOffset.xy + BlurOffsets[1].xy).xyz;
    blur += tex2D(ScreenSpace, IN.ScreenOffset.xy + BlurOffsets[2].xy).xyz;
    blur += tex2D(ScreenSpace, IN.ScreenOffset.xy + BlurOffsets[3].xy).xyz;
    blur += tex2D(ScreenSpace, IN.ScreenOffset.xy + BlurOffsets[4].xy).xyz;
    blur += tex2D(ScreenSpace, IN.ScreenOffset.xy + BlurOffsets[5].xy).xyz;
    blur += tex2D(ScreenSpace, IN.ScreenOffset.xy + BlurOffsets[6].xy).xyz;
    blur += tex2D(ScreenSpace, IN.ScreenOffset.xy + BlurOffsets[7].xy).xyz;
    blur += tex2D(ScreenSpace, IN.ScreenOffset.xy + BlurOffsets[8].xy).xyz;
    blur /= 9;

    t0.xyz = blur;
    OUT.color_0.a = 1;
    OUT.color_0.rgb = t0.xyz;
    // - full screen Shader
    // - copy input to output, set w to 1
    //
    // out . xyzw = [in . xyz,1]

    return OUT;
};

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
