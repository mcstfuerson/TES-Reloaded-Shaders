//
// Generated by Microsoft (R) D3DX9 Shader Compiler 9.08.299.0000
//
//   vsa shaderdump19/SLS2018.pso /Fcshaderdump19/SLS2018.pso.dis
//
//
// Parameters:

float4 AmbientColor : register(c1);
sampler2D BaseMap : register(s0);
sampler2D NormalMap : register(s1);
float4 PSLightColor[4] : register(c2);
sampler2D ShadowMap : register(s6);
sampler2D ShadowMaskMap : register(s7);
float4 Toggles : register(c7);
float4 TESR_ShadowData : register(c8);
sampler2D TESR_ShadowMapBufferNear : register(s8) = sampler_state { ADDRESSU = CLAMP; ADDRESSV = CLAMP; MAGFILTER = LINEAR; MINFILTER = LINEAR; MIPFILTER = LINEAR; };
sampler2D TESR_ShadowMapBufferFar : register(s9) = sampler_state { ADDRESSU = CLAMP; ADDRESSV = CLAMP; MAGFILTER = LINEAR; MINFILTER = LINEAR; MIPFILTER = LINEAR; };

// Registers:
//
//   Name          Reg   Size
//   ------------- ----- ----
//   AmbientColor  const_1       1
//   PSLightColor[0]  const_2        1
//   Toggles       const_7       1
//   BaseMap       texture_0       1
//   NormalMap     texture_1       1
//   ShadowMap     texture_6       1
//   ShadowMaskMap texture_7       1
//


// Structures:

struct VS_OUTPUT {
    float2 BaseUV : TEXCOORD0;
    float3 texcoord_1 : TEXCOORD1_centroid;
    float3 texcoord_3 : TEXCOORD3_centroid;
	float4 texcoord_6 : TEXCOORD6;
    float4 texcoord_7 : TEXCOORD7;
    float3 LCOLOR_0 : COLOR0;
    float4 LCOLOR_1 : COLOR1;
};

struct PS_OUTPUT {
    float4 color_0 : COLOR0;
};

#include "../Shadows/Includes/Shadow.hlsl"

PS_OUTPUT main(VS_OUTPUT IN) {
    PS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)
#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)		saturate(dot(n, l))

    float3 q18;
    float3 q2;
    float3 q4;
    float1 q5;
    float3 q9;
    float4 r0;
    float4 r2;

    r0.xyzw = tex2D(NormalMap, IN.BaseUV.xy);
    q18.xyz = normalize(expand(r0.xyz));
    r2.w = r0.w * pow(abs(shades(q18.xyz, normalize(IN.texcoord_3.xyz))), Toggles.z);
    r0.xyzw = tex2D(BaseMap, IN.BaseUV.xy);
    q5.x = dot(q18.xyz, IN.texcoord_1.xyz);
    q2.xyz = GetLightAmount(IN.texcoord_6, IN.texcoord_7);
    q9.xyz = saturate((0.2 >= q5.x ? (r2.w * max(q5.x + 0.5, 0)) : r2.w) * PSLightColor[0].rgb) * q2.xyz;
    r0.xyz = (Toggles.x <= 0.0 ? r0.xyz : (r0.xyz * IN.LCOLOR_0.xyz));
    q4.xyz = (r0.xyz * max((q2.xyz * (saturate(q5.x) * PSLightColor[0].rgb)) + AmbientColor.rgb, 0)) + q9.xyz;
    OUT.color_0.a = r0.w * AmbientColor.a;
    OUT.color_0.rgb = (Toggles.y <= 0.0 ? q4.xyz : lerp(q4.xyz, IN.LCOLOR_1.xyz, IN.LCOLOR_1.w));

    return OUT;
};

// approximately 41 instruction slots used (4 texture, 37 arithmetic)
